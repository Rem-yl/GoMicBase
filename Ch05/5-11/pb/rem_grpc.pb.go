// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: rem.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RemService_HelloName_FullMethodName  = "/RemService/HelloName"
	RemService_PostName_FullMethodName   = "/RemService/PostName"
	RemService_FullStream_FullMethodName = "/RemService/FullStream"
)

// RemServiceClient is the client API for RemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemServiceClient interface {
	HelloName(ctx context.Context, in *RemStreamRequest, opts ...grpc.CallOption) (RemService_HelloNameClient, error)
	PostName(ctx context.Context, opts ...grpc.CallOption) (RemService_PostNameClient, error)
	FullStream(ctx context.Context, opts ...grpc.CallOption) (RemService_FullStreamClient, error)
}

type remServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemServiceClient(cc grpc.ClientConnInterface) RemServiceClient {
	return &remServiceClient{cc}
}

func (c *remServiceClient) HelloName(ctx context.Context, in *RemStreamRequest, opts ...grpc.CallOption) (RemService_HelloNameClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemService_ServiceDesc.Streams[0], RemService_HelloName_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &remServiceHelloNameClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemService_HelloNameClient interface {
	Recv() (*RemStreamResponse, error)
	grpc.ClientStream
}

type remServiceHelloNameClient struct {
	grpc.ClientStream
}

func (x *remServiceHelloNameClient) Recv() (*RemStreamResponse, error) {
	m := new(RemStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remServiceClient) PostName(ctx context.Context, opts ...grpc.CallOption) (RemService_PostNameClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemService_ServiceDesc.Streams[1], RemService_PostName_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &remServicePostNameClient{ClientStream: stream}
	return x, nil
}

type RemService_PostNameClient interface {
	Send(*RemStreamRequest) error
	CloseAndRecv() (*RemStreamResponse, error)
	grpc.ClientStream
}

type remServicePostNameClient struct {
	grpc.ClientStream
}

func (x *remServicePostNameClient) Send(m *RemStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remServicePostNameClient) CloseAndRecv() (*RemStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RemStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remServiceClient) FullStream(ctx context.Context, opts ...grpc.CallOption) (RemService_FullStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RemService_ServiceDesc.Streams[2], RemService_FullStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &remServiceFullStreamClient{ClientStream: stream}
	return x, nil
}

type RemService_FullStreamClient interface {
	Send(*RemStreamRequest) error
	Recv() (*RemStreamResponse, error)
	grpc.ClientStream
}

type remServiceFullStreamClient struct {
	grpc.ClientStream
}

func (x *remServiceFullStreamClient) Send(m *RemStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remServiceFullStreamClient) Recv() (*RemStreamResponse, error) {
	m := new(RemStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemServiceServer is the server API for RemService service.
// All implementations must embed UnimplementedRemServiceServer
// for forward compatibility
type RemServiceServer interface {
	HelloName(*RemStreamRequest, RemService_HelloNameServer) error
	PostName(RemService_PostNameServer) error
	FullStream(RemService_FullStreamServer) error
	mustEmbedUnimplementedRemServiceServer()
}

// UnimplementedRemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemServiceServer struct {
}

func (UnimplementedRemServiceServer) HelloName(*RemStreamRequest, RemService_HelloNameServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloName not implemented")
}
func (UnimplementedRemServiceServer) PostName(RemService_PostNameServer) error {
	return status.Errorf(codes.Unimplemented, "method PostName not implemented")
}
func (UnimplementedRemServiceServer) FullStream(RemService_FullStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FullStream not implemented")
}
func (UnimplementedRemServiceServer) mustEmbedUnimplementedRemServiceServer() {}

// UnsafeRemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemServiceServer will
// result in compilation errors.
type UnsafeRemServiceServer interface {
	mustEmbedUnimplementedRemServiceServer()
}

func RegisterRemServiceServer(s grpc.ServiceRegistrar, srv RemServiceServer) {
	s.RegisterService(&RemService_ServiceDesc, srv)
}

func _RemService_HelloName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemServiceServer).HelloName(m, &remServiceHelloNameServer{ServerStream: stream})
}

type RemService_HelloNameServer interface {
	Send(*RemStreamResponse) error
	grpc.ServerStream
}

type remServiceHelloNameServer struct {
	grpc.ServerStream
}

func (x *remServiceHelloNameServer) Send(m *RemStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RemService_PostName_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemServiceServer).PostName(&remServicePostNameServer{ServerStream: stream})
}

type RemService_PostNameServer interface {
	SendAndClose(*RemStreamResponse) error
	Recv() (*RemStreamRequest, error)
	grpc.ServerStream
}

type remServicePostNameServer struct {
	grpc.ServerStream
}

func (x *remServicePostNameServer) SendAndClose(m *RemStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remServicePostNameServer) Recv() (*RemStreamRequest, error) {
	m := new(RemStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemService_FullStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemServiceServer).FullStream(&remServiceFullStreamServer{ServerStream: stream})
}

type RemService_FullStreamServer interface {
	Send(*RemStreamResponse) error
	Recv() (*RemStreamRequest, error)
	grpc.ServerStream
}

type remServiceFullStreamServer struct {
	grpc.ServerStream
}

func (x *remServiceFullStreamServer) Send(m *RemStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remServiceFullStreamServer) Recv() (*RemStreamRequest, error) {
	m := new(RemStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemService_ServiceDesc is the grpc.ServiceDesc for RemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RemService",
	HandlerType: (*RemServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloName",
			Handler:       _RemService_HelloName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostName",
			Handler:       _RemService_PostName_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FullStream",
			Handler:       _RemService_FullStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rem.proto",
}
