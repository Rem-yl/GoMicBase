// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: book.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Study_Study_FullMethodName = "/pb.Study/Study"
)

// StudyClient is the client API for Study service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyClient interface {
	Study(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
}

type studyClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyClient(cc grpc.ClientConnInterface) StudyClient {
	return &studyClient{cc}
}

func (c *studyClient) Study(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, Study_Study_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyServer is the server API for Study service.
// All implementations must embed UnimplementedStudyServer
// for forward compatibility
type StudyServer interface {
	Study(context.Context, *BookRequest) (*BookResponse, error)
	mustEmbedUnimplementedStudyServer()
}

// UnimplementedStudyServer must be embedded to have forward compatible implementations.
type UnimplementedStudyServer struct {
}

func (UnimplementedStudyServer) Study(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Study not implemented")
}
func (UnimplementedStudyServer) mustEmbedUnimplementedStudyServer() {}

// UnsafeStudyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyServer will
// result in compilation errors.
type UnsafeStudyServer interface {
	mustEmbedUnimplementedStudyServer()
}

func RegisterStudyServer(s grpc.ServiceRegistrar, srv StudyServer) {
	s.RegisterService(&Study_ServiceDesc, srv)
}

func _Study_Study_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServer).Study(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Study_Study_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServer).Study(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Study_ServiceDesc is the grpc.ServiceDesc for Study service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Study_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Study",
	HandlerType: (*StudyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Study",
			Handler:    _Study_Study_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
